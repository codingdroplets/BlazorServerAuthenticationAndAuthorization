@using BlazorServerAuthenticationAndAuthorization.Authentication
@inherits LayoutComponentBase
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject NavigationManager NavigationManager
@using Syncfusion.Blazor
@using Syncfusion.Blazor.SplitButtons

<PageTitle>BlazorServerAuthenticationAndAuthorization</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <button class="button" aria-hidden="true">Home</button> 
            </NavLink>
            <AuthorizeView>
                <Authorized>
                    <div class="dropdown">
                        <button class="dropbtn">Menu</button>
                        <div class="dropdown-content">
                            <button class="button" @onclick="@(e => NavigateToAddGuest(e))">Meghívott hozzáadása</button>
                            <button class="button" @onclick="@(e => NavigateToAddUser(e))">Felhasználó hozzáasa</button>
                            <button class="button" @onclick="@(e => NavigateToAddCreateEvent(e))">Esemény hozzáadsa</button>
                            <button class="button" @onclick="@(e => NavigateToEventGuestList(e))">Ember hozzáadása a rendezvényhez</button>
                        </div>
                    </div>

                    <a class ="button" @onclick="Logout" href="javascript:void(0)">Logout</a>
                </Authorized>
                <NotAuthorized>
                    <a class="button" href="/login">Login</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code{
    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navManager.NavigateTo("/", true);
    }
    protected void NavigateToAddGuest(MouseEventArgs e)
    {
        NavigationManager.NavigateTo("/add-guest");
    }

    protected void NavigateToAddUser(MouseEventArgs e)
    {
        NavigationManager.NavigateTo("/adduser");
    }

    protected void NavigateToAddCreateEvent(MouseEventArgs e)
    {
        NavigationManager.NavigateTo("/create-event");
    }

    protected void NavigateToEventGuestList(MouseEventArgs e)
    {
        NavigationManager.NavigateTo("/eventguests");
    }
    protected void NavigateToEventDetails(MouseEventArgs e, int eventId)
    {
        NavigationManager.NavigateTo($"/event-details/{eventId}");
    }
}